# FORM DATA

The special thing about FormData is that network methods, such as fetch, can accept a FormDataobject as a body. It’s encoded and sent out with Content-Type: form/multipart. So, from the server point of view, that looks like a usual form submission.
## Sending a simple form
![Alt text](<../Pics/send form.png>)

## sending a simple form with a file
The form is always sent as Content-Type: form/multipart, this encoding allows to send files. So, <input type="file"> fields are sent also, similar to a usual form submission.

Here’s an example with such form:
![Alt text](<../Pics/send form with file.png>)

## Send form objects with
FormData objects are used to capture HTML form and submit it using fetch or another network method.

We can either create new FormData(form) from an HTML form, or create an empty object, and then append fields with methods:

+ formData.append(name, value)
+ formData.append(name, blob, fileName)
+ formData.set(name, value)
+ formData.set(name, blob, fileName)

Two peculiarities here:
+ The set method removes fields with the same name, append doesn’t.
+ To send a file, 3-argument syntax is needed, the last argument is a file name, that normally is taken from user filesystem for <input type="file">.

Other methods are:

+ formData.delete(name)
+ formData.get(name)
+ formData.has(name)
 ## Fetch : Download progress

 The fetch method allows to track download progress.

Please note: there’s currently no way for fetch to track upload progress. For that purpose, please use XMLHttpRequest, we’ll cover it later.

To track download progress, we can use response.body property. It’s a “readable stream” – a special object that provides body chunk-by-chunk, as it comes.

Unlike response.text(), response.json() and other methods, response.body gives full control over the reading process, and we can count how much is consumed at any moment.

Here’s the sketch of code that reads the response from response.body:
![Alt text](../Pics/fetch.png)

The result of await reader.read() call is an object with two properties:

+ done – true when the reading is complete.
+ value – a typed array of bytes: Uint8Array.

We wait for more chunks in the loop, until done is true.

To log the progress, we just need for every value add its length to the counter.

Here’s the full code to get response and log the progress, more explanations follow:
![Alt text](<../Pics/save and log.png>)
![Alt text](<../Pics/save and log 1.png>)
Let’s explain that step-by-step:

+ We perform fetch as usual, but instead of calling response.json(), we obtain a stream reader response.body.getReader().
+ Please note, we can’t use both these methods to read the same response. Either use a reader or a response method to get the result.
+ Prior to reading, we can figure out the full response length from the Content-Length header.
+ It may be absent for cross-domain requests (see chapter Fetch: Cross-Origin Requests) and, well, technically a server doesn’t have to set it. But usually it’s at place.
+ Call await reader.read() until it’s done.
+ We gather response chunks in the array. That’s important, because after the response is consumed, we won’t be able to “re-read” it using response.json() or another way (you can try, there’ll be an error).
+ At the end, we have chunks – an array of Uint8Array byte chunks. We need to join them into a single result.Unfortunately, there’s no single method that concatenates those, so there’s some code to do that:
+ We create new Uint8Array(receivedLength) – a same-typed array with the combined length.
+ Then use .set(chunk, position) method to copy each chunk one after another in the resulting array.
+ We have the result in chunksAll. It’s a byte array though, not a string.

To create a string, we need to interpret these bytes. The built-in TextDecoder does exactly that. Then we can JSON.parse it.

What if we need binary content instead of JSON? That’s even simpler. Replace steps 4 and 5 with a single call to a blob from all chunks:

let blob = new Blob(chunks);

At we end we have the result (as a string or a blob, whatever is convenient), and progress-tracking in the process.

## Fetch : Abort
Aborting a fetch is a little bit tricky. Remember, fetch returns a promise. And JavaScript generally has no concept of “aborting” a promise. So how can we cancel a fetch?

There’s a special built-in object for such purposes: AbortController.

+ The usage is pretty simple:

+ Step 1: create a controller:
+ + let controller = new AbortController();

+ + A controller is an extremely simple object. It has a single method abort(), and a single property signal. When abort() is called, the abortevent triggers on controller.signal:
![Alt text](<../Pics/abort 1.png>)

